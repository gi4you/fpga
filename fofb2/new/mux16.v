// -------------------------------------------------------------
//
// File Name: hdlsrc\mux16.v
// Created: 2013-05-13 22:33:55
// Generated by MATLAB 7.6 and Simulink HDL Coder 1.3
//
//
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mux16
          (
           clk,
           reset,
		   trig,
           clk_enable,
           a1,
           a2,
           a3,
           a4,
           a5,
           a6,
           a7,
           a8,
           a9,
           a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           len,
           addr,
           dir,
           ce_out,
           Data_o,
		   IntAddr_O,
           we
          );


  input   clk;
  input   reset;
  input	  trig;
  input   clk_enable;
  input   signed [31:0] a1;  // int32
  input   signed [31:0] a2;  // int32
  input   signed [31:0] a3;  // int32
  input   signed [31:0] a4;  // int32
  input   signed [31:0] a5;  // int32
  input   signed [31:0] a6;  // int32
  input   signed [31:0] a7;  // int32
  input   signed [31:0] a8;  // int32
  input   signed [31:0] a9;  // int32
  input   signed [31:0] a10;  // int32
  input   signed [31:0] a11;  // int32
  input   signed [31:0] a12;  // int32
  input   signed [31:0] a13;  // int32
  input   signed [31:0] a14;  // int32
  input   signed [31:0] a15;  // int32
  input   signed [31:0] a16;  // int32
  input   [3:0] len;  // ufix4
  input   [3:0] addr;  // ufix4
  input   dir;
  output  ce_out;
  output  signed [31:0] Data_o;  // int32
  output  [3:0] IntAddr_O;
  output  we;


  wire enb;
  wire enb_1_1_1;
  reg [3:0] Counter_Free_Running1_out1;  // ufix4
  wire [3:0] switch_out1;  // ufix4
  wire signed [31:0] Multiport_Switch_out1;  // int32
  wire [3:0] start_out1;  // ufix4
  wire Relational_Operator1_out1;
  wire Relational_Operator3_out1;
  wire Logical_Operator2_out1;

  assign enb_1_1_1 = clk_enable;
  assign ce_out = enb_1_1_1;
  always @ (posedge clk or posedge reset)
    begin: Counter_Free_Running1_process
      if (reset == 1'b1 || trig == 1'b1) begin
        Counter_Free_Running1_out1 <= 4'b0000;
      end
      else begin
        if (enb == 1'b1) begin
          if (Counter_Free_Running1_out1 == 4'b1111) begin
            //Counter_Free_Running1_out1 <= 4'b0000;
			Counter_Free_Running1_out1 <= Counter_Free_Running1_out1;
          end
          else begin
            Counter_Free_Running1_out1 <= Counter_Free_Running1_out1 + 1;
          end
        end
      end
    end // Counter_Free_Running1_process

  assign switch_out1 = (dir == 1'b1) ? addr : Counter_Free_Running1_out1;
  
  assign Multiport_Switch_out1 = (switch_out1 == 4'b0000) ? a1 :
                              (switch_out1 == 4'b0001) ? a2 :
                              (switch_out1 == 4'b0010) ? a3 :
                              (switch_out1 == 4'b0011) ? a4 :
                              (switch_out1 == 4'b0100) ? a5 :
                              (switch_out1 == 4'b0101) ? a6 :
                              (switch_out1 == 4'b0110) ? a7 :
                              (switch_out1 == 4'b0111) ? a8 :
                              (switch_out1 == 4'b1000) ? a9 :
                              (switch_out1 == 4'b1001) ? a10 :
                              (switch_out1 == 4'b1010) ? a11 :
                              (switch_out1 == 4'b1011) ? a12 :
                              (switch_out1 == 4'b1100) ? a13 :
                              (switch_out1 == 4'b1101) ? a14 :
                              (switch_out1 == 4'b1110) ? a15 :
                              a16;

  assign Data_o = Multiport_Switch_out1;
  assign start_out1 = 4'b0000;

  assign Relational_Operator1_out1 = (Counter_Free_Running1_out1 >= start_out1) ? 1'b1 : 1'b0;

  assign Relational_Operator3_out1 = (Counter_Free_Running1_out1 < len) ? 1'b1 : 1'b0;

  assign Logical_Operator2_out1 =  Relational_Operator1_out1 & Relational_Operator3_out1;

  assign IntAddr_O	= Counter_Free_Running1_out1;
  assign we = Logical_Operator2_out1;
  assign enb = clk_enable;

endmodule  // mux16

